snippet cs
	var cx = React.addons.classSet;
snippet cdm
	componentDidMount () {
		${1}
	}
snippet cdup
	componentDidUpdate (prevProps, prevState) {
		${1}
	}
snippet cwm
	componentWillMount () {
		${1}
	}
snippet cwr
	componentWillReceiveProps (nextProps) {
		${1}
	}
snippet cwun
	componentWillUnmount () {
		${1}
	},
snippet cwu
	componentWillUpdate (nextProps, nextState) {
		${1}
	}
snippet cx
	cx({
		${1}: ${2}
	});
snippet fup
	forceUpdate(${1:callback});
snippet gdp
	getDefaultProps() {
		return {
			${1}
		};
	}
snippet gis
	getInitialState: function() {
		return {
			${1}: ${2}
		};
	},
snippet ism
	isMounted()
snippet jsx
	/**
	 * @jsx React.DOM
	 */
snippet pt
	static get propTypes () {
    return {
      ${1}: React.PropTypes.${2:string}
    };
	}
snippet ct
	static get contextTypes () {
    return {
      router: React.PropTypes.func.isRequired
    };
	}
snippet rcc
	/**
	 * @jsx React.DOM
	 */

	var React = require('react');

	var ${1:ClassName} = React.createClass({

		render: function() {
			return (
				${0:<div />}
			);
		}

	});

	module.exports = $1;
snippet rc
  import React, {Component} from 'react';

  class ${1:ClassName} extends Component {
    render () {
      return (
        ${0:<div></div>}
      );
    }
  }

  export default $1;
snippet ren
	render () {
		return (
			${1:<div />}
		);
	}
snippet sst
	setState({
		${1}: ${2}
	});
snippet scu
	shouldComponentUpdate (nextProps, nextState) {
		${1}
	}
snippet props
	this.props.${1}
snippet state
	this.state.${1}
snippet trp
	transferPropsTo(${1});
